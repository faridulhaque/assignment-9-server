generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  email       String       @unique
  password    String
  isAdmin     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserProfile UserProfile?
  FoundItem   FoundItem[]
  claim_user  claim_user[]
  LostItem    LostItem[]

  @@map("users")
}

model FoundItemCategory {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  FoundItem FoundItem[]
  LostItem  LostItem[]

  @@map("itemCategories")
}

model FoundItem {
  id          String            @id @default(uuid())
  userId      String
  categoryId  String
  description String
  location    String
  phone       String?
  email       String?
  imgUrl      String?
  foundDate   DateTime          @default(now())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
  category    FoundItemCategory @relation(fields: [categoryId], references: [id])
  claim       Claim[]

  @@map("foundItems")
}

model LostItem {
  id          String            @id @default(uuid())
  userId      String
  categoryId  String
  description String
  isFound     Boolean           @default(false)
  imgUrl      String?
  location    String?
  lostDate    DateTime?
  phone       String?
  email       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
  category    FoundItemCategory @relation(fields: [categoryId], references: [id])

  @@map("lostItems")
}

model Claim {
  id          String       @id @default(uuid())
  userId      String
  foundItemId String
  status      String       @default("PENDING")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  FoundItem   FoundItem    @relation(fields: [foundItemId], references: [id])
  claim_user  claim_user[]
  // LostItem    LostItem?    @relation(fields: [lostItemId], references: [id])
  // lostItemId  String?

  @@map("claims")
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model claim_user {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  claimId String
  claim   Claim  @relation(fields: [claimId], references: [id])

  @@id([claimId, userId])
}
